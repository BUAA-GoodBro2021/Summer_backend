<h1><strong>架构设计说明书</strong></h1>
<p></p>
<p>🌟 <mark>荧光笔标注的位置务必要修改为实际情况，模板只提供预设情况的形式</mark></p>
<p></p>
<h2>版本变更历史</h2>
<p></p>
<table>
    <tbody>
        <tr>
            <th colspan="1" rowspan="1">
                <p>版本</p>
            </th>
            <th colspan="1" rowspan="1">
                <p>提交日期</p>
            </th>
            <th colspan="1" rowspan="1">
                <p>主要编制人</p>
            </th>
            <th colspan="1" rowspan="1">
                <p>审核人</p>
            </th>
            <th colspan="1" rowspan="1">
                <p>版本说明</p>
            </th>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>1.0</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>2022/8/10</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>周北北</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>李骁骁</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>完成技术选型和横切关注点</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>1.1</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>2022/8/10</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>周北北</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>李骁骁</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>完成前端架构设计部分</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>...</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>...</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>...</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>...</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>...</p>
            </td>
        </tr>
    </tbody>
</table>
<p></p>
<h2>1. 引言</h2>
<h3>1.1 项目概述</h3>
<ul>
    <li>
        <p>项目定位：</p>
    </li>
    <li>
        <p>项目设计：</p>
    </li>
</ul>
<h3>1.2 文档概述</h3>
<p>本文档聚焦于<mark>xxxxx平台</mark>的软件架构设计、部署策略和质量属性等。文档从总体架构、部署策略、技术选型、质量属性、横切关注点等多个方面详细阐述了该平台的架构设计，为后续的开发提供参考。</p>
<h3>1.3 参考文档</h3>
<p>.....</p>
<p></p>
<h2>2. 总体架构</h2>
<h3>2.1 总体架构</h3>
<p><mark>xxxxx平台</mark>的系统总体架构使用微服务架构，将应用分解成多个独立的组件，每个组件都有各自的责任领域，支持开发、部署和维护的独立性。</p>
<p>由于微服务结构的高内聚性，保证了每个微服务都是独立的服务，提高了代码的易编写、易测试性。在不同的微服务间，还可以通过简单的接口与其他的服务进行通信，来解决业务问题。此外，由于每个服务是独立开发出来的，采用微服务架构便于进行多次迭代，并随时可以应用新的技术，而不会被技术栈所限制。
</p>
<p></p>
<h3>2.2 前端架构</h3>
<p>前端使用了类MVVM模式的Vue.js架构。MVVM是Model-View-ViewModel的简写，将项目分为Model-View-ViewModel三层。View视图层实现用户界面，Model模型层存储JavaScript数据对象，并与后端进行传输或同步等操作，View-Model视图模型层实现了模型层和视图层的数据绑定。
</p>
<p>......</p>
<p></p>
<h3>2.3 后端架构</h3>
<p>后端架构主要是基于Go语言的Gin框架进行开发，该框架是一个类似martini但却有着更好的性能的API框架，并且优于http
    router，甚至速度提高了近40倍。由于Gin框架具有这比较高的性能，比较适合我们的项目中快速反应的需求。而在整体上，分为控制层，逻辑层与数据层。具体层次间的关系如下图所示。每一层分别做好本层的工作，而后使用请求来构造下一层所需要的参数并调用下一层的函数。当工作完成后，再将处理结果一层一层的传出到入口。
</p>
<p>......</p>
<p></p>
<h3>2.4 业务服务群</h3>
<h4>2.3.1 用户信息服务</h4>
<ul data-type="taskList">
    <li data-checked="true" data-type="taskItem"><label><input type="checkbox" checked="checked"><span></span></label>
        <div>
            <p>用户信息服务群主要负责维护三种用户的用户信息，除此之外还负责维护认证用户的门户信息以及处理用户信息。</p>
        </div>
    </li>
    <li data-checked="false" data-type="taskItem"><label><input type="checkbox"><span></span></label>
        <div>
            <p>用户信息服务群主要包括的服务有用户信息管理服务，登录注册服务，门户服务等。</p>
        </div>
    </li>
</ul>
<h4>2.3.xxx xxxx服务</h4>
<p>....</p>
<p></p>
<h2>3. 部署策略</h2>
<h3>3.1 部署方案</h3>
<p>考虑到网站的流量可能较大，我们使用分布式的方式部署。将动态资源与静态资源分别部署。将静态资源部署到CDN上，由CDN返回给用户距离用户最近的节点。而对于动态资源，则使用DNS负载均衡技术。在DNS解析域名时随机转到某一台LVS上，由LVS通过负载均衡算法选择一个最佳的服务器进行处理请求。
</p>
<p>......</p>
<p></p>
<h3>3.2 部署设备性能</h3>
<h4>3.2.1 高性能服务器实例</h4>
<ul>
    <li>
        <p>CPU：8核心</p>
    </li>
    <li>
        <p>内存：64G</p>
    </li>
    <li>
        <p>硬盘：一块高IO硬盘700G，一块普通硬盘80G</p>
    </li>
    <li>
        <p>数量：1台</p>
    </li>
</ul>
<h4>3.2.xx xxx服务器实例</h4>
<p>......</p>
<p></p>
<h2>4 技术选型</h2>
<h3>4.1 技术框架表格</h3>
<h4>4.1.1 后端技术</h4>
<table>
    <tbody>
        <tr>
            <th colspan="1" rowspan="2">
                <p>应用框架</p>
            </th>
            <th colspan="1" rowspan="1">
                <p>Go</p>
            </th>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>Gin</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>代码管理及版本控制</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>Git</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>后端开发工具</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>Goland</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>数据库服务器</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>MySQL</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>数据存取</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>gorm</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>服务器部署</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>Nginx</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>缓存</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>Redis</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>.........</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>.........</p>
            </td>
        </tr>
    </tbody>
</table>
<h4>4.1.1 前端技术</h4>
<table>
    <tbody>
        <tr>
            <th colspan="1" rowspan="1">
                <p>应用框架</p>
            </th>
            <th colspan="1" rowspan="1">
                <p>Vue.js</p>
            </th>
        </tr>
        <tr>
            <td colspan="1" rowspan="2">
                <p>应用层</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>Vuex</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>Vue-Router</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>代码管理及版本控制</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>Git</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>前端开发工具</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>VS Code</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>HTTP库</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>Axios</p>
            </td>
        </tr>
        <tr>
            <td colspan="1" rowspan="1">
                <p>.........</p>
            </td>
            <td colspan="1" rowspan="1">
                <p>.........</p>
            </td>
        </tr>
    </tbody>
</table>
<p></p>
<h3>4.2 重要技术说明</h3>
<h4>4.2.1 Vue.js</h4>
<p>Vue.js是一套用于构建用户界面的渐进式JavaScript框架，其核心库关注视图层，采用自底向上增量开发的设计。Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<p>使用Vue.js作为学术成果分享平台的前端应用框架，可以更好地支持实时响应式设计。同时，Vue.js操作的简便性也为开发效率的提升做出贡献。除此之外，利用Vue可以将元素集合封装成组件，方便重复使用。</p>
<h4>4.2.x xxx</h4>
<p>....</p>
<p></p>
<h2>5. 质量属性</h2>
<h3>5.1 设计质量</h3>
<h4>5.1.1 概念完整性</h4>
<ol>
    <li>
        <p>使用统一的命名规范：前端变量采用camelCase驼峰式命名，Vue文件采用PascalBase帕斯卡方式命名，事件与组件采用kebab-case方式命名；后端相关变量命名使用camelCase驼峰式；前后端数据传输标识符命名采取snake_case方式。
        </p>
    </li>
    <li>
        <p>使用统一的术语：对于系统中出现的指代相同事物的名词应保持一致，确保所有开发人员和维护人员在概念理解上保持一致。</p>
    </li>
    <li>
        <p>组件化与模块化设计：前端项目采用Vue框架，建立资源层、组件层、路由层、存储层和视图层，并在组件层中设计全局组件，在视图层的页面文件同目录创建子文件夹，存储局部组件；后端项目采用Gin框架，分离中间件、模型层、路由层和服务层，实现模块化设计。
        </p>
    </li>
    <li>
        <p>....</p>
    </li>
</ol>
<p></p>
<h4>5.1.2 可维护性</h4>
<ol>
    <li>
        <p>后端的公有方法、公有类按照Swagger的形式进行注释，进而自动维护和部署前后端接口文档。前后端复用代码或接口代码都对其作用、使用方法进行注释，以减少耦合时出现的理解偏差。</p>
    </li>
    <li>
        <p>未在上一条中提到的其它部分代码，都需要进行适当的注释以便于代码维护。</p>
    </li>
    <li>
        <p>......</p>
    </li>
</ol>
<p></p>
<h4>5.1.3 复用性</h4>
<ol>
    <li>
        <p>前后端项目的代码都采用模块化和组件化设计，实现模块内高内聚，模块间低耦合。</p>
    </li>
    <li>
        <p>.....</p>
    </li>
</ol>
<p></p>
<h3>5.2 运行质量</h3>
<h4>5.2.1 性能</h4>
<ol>
    <li>
        <p>内网环境下，系统往返延迟低于1秒，每秒最高并发量达到千级。当每秒并发量高于千级时，允许系统的平均响应时间延长至1秒以上。</p>
    </li>
    <li>
        <p>使用CDN，自动选择离用户近的节点返回给用户，降低用户访问时延。</p>
    </li>
    <li>
        <p>..........</p>
    </li>
</ol>
<p></p>
<h4>5.2.2 可延展性</h4>
<ol>
    <li>
        <p>部署采用LVS和Nginx均衡负载，提高系统可延展性。</p>
    </li>
    <li>
        <p>.........</p>
    </li>
</ol>
<p></p>
<h4>5.2.2 安全性</h4>
<ol>
    <li>
        <p>配置SSL安全证书，保证所有连接使用TLS1.3协议进行加密。使用ECDH密匙交换协议保证前向加密安全。</p>
    </li>
    <li>
        <p>对于所有的敏感且不会再使用明文的信息，只存储其SHA-256值。</p>
    </li>
    <li>
        <p>数据应进行定期备份。</p>
    </li>
    <li>
        <p>服务器实例配备专用的硬件防火墙，并利用CDN的特点进行负载均衡、流量清洗、带宽扩容等手段，保证系统能够抵御带宽至少10Gbps的DDoS。</p>
    </li>
    <li>
        <p>...........</p>
    </li>
</ol>
<p></p>
<h3>5.3 系统质量</h3>
<h4>5.3.1 可支持性</h4>
<ol>
    <li>
        <p>系统包含日志功能，自动记录日志信息，便于进行错误定位和进行审计。</p>
    </li>
    <li>
        <p>......</p>
    </li>
</ol>
<p></p>
<h4>5.3.1 可测试性</h4>
<ol>
    <li>
        <p>系统前后端分离，实现系统的模块化和组件化，降低模块间的耦合度，便于分模块测试。</p>
    </li>
    <li>
        <p>......</p>
    </li>
</ol>
<p></p>
<h3>5.4 用户质量</h3>
<h4>5.4.1 可测试性</h4>
<ol>
    <li>
        <p>系统界面简洁，标识清楚，按钮适中，易于点击。</p>
    </li>
    <li>
        <p>前端对不同屏幕大小的设备有不同的界面适配。</p>
    </li>
    <li>
        <p>.........</p>
    </li>
</ol>
<p></p>
<h2>6. 横切关注点</h2>
<h3>6.1 安全性</h3>
<h4>6.1.1 安全问题</h4>
<p>系统可能被未经授权的用户攻击，篡改数据，导致信息泄露或系统崩溃。我们主要关注用户的身份认证，授权，以及输入和数据验证的问题。</p>
<p>.........</p>
<p></p>
<h3>6.2 异常处理</h3>
<h4>6.2.1 异常检测</h4>
<ol>
    <li>
        <p>当服务器实例处理到未知的异常时，发送信息给报警系统。</p>
    </li>
    <li>
        <p>使用一个守护进程，定时向系统各个部分发送存活性检测的消息。若一定时间内未收到某个部分回复此消息就认为此部分故障，并发送报警信息给维护人员。</p>
    </li>
    <li>
        <p>...........</p>
    </li>
</ol>
<h4>6.2.1 异常恢复</h4>
<ol>
    <li>
        <p>数据库使用事务进行操作，若出现数据库操作异常或系统宕机，确保数据能回滚和恢复。</p>
    </li>
    <li>
        <p>宕机后对现场进行保存。服务器再次重启时确保服务始终可用。</p>
    </li>
    <li>
        <p>.........</p>
    </li>
</ol>
<p></p>
<p></p>
<h3>6.3 缓存</h3>
<ol>
    <li>
        <p>服务器前端数据——LocalStorage缓存</p>
    </li>
    <li>
        <p>使用mysql数据库，用Redis对数据库的查询结果进行缓存</p>
    </li>
    <li>
        <p>采用页面缓存提高动态网页的响应时间</p>
    </li>
    <li>
        <p>..........</p>
    </li>
</ol>
<p></p>
<h3>6.3 日志</h3>
<ol>
    <li>
        <p>服务器实例采用logrus日志框架进行记录，配置定义输出、格式以及日志级别等。</p>
    </li>
</ol>
<ol start="2">
    <li>
        <p>采用logrus中可扩展的Hook机制，通过hook定义日志内容，允许使用hook的方式将日志分发到任意地方</p>
    </li>
    <li>
        <p>............</p>
    </li>
</ol>
<p></p>
<h2>7. 总结</h2>
<p>本文档详细阐述了<mark>xxxxx平台</mark>的架构设计，通过对总体架构的描述，展示了系统架构的应用类型与宏观设计，其中前端架构部分阐释了Vue中的MVVM架构与组件化，后端部分阐释了Gin的服务层，逻辑层与数据层，在微服务划分部分则介绍了本平台的服务群，并列举了其中的服务。在部署策略部分里，本文档根据系统的预期需求及目标确定的需要部署的设备，并初步给出满足条件的部署方案。在技术选型部分中，本项目根据系统的预期目标确定了需要部署的技术选型，并对相关技术用途进行了进一步说明。在质量属性部分中，本文档根据预期目标确定了技术选型，并对相关技术的用途做了进一步的说明。本文档还总结了开发中的横切关注点，包括安全性、一次处理、缓存、通信与消息以及日志。
</p>
<p>...................</p>
<p></p>